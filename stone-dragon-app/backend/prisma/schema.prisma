// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - represents students, coordinators, and admins
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String   @default("STUDENT") // STUDENT, COORDINATOR, STUDENT_COORDINATOR, ADMIN
  schoolId  String?
  pushToken String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  school        School?        @relation(fields: [schoolId], references: [id])
  volunteerLogs VolunteerLog[]
  reviewedLogs  VolunteerLog[] @relation("LogReviewer")
  userBadges    UserBadge[]
  createdEvents Event[]        @relation("EventCreator")
  eventCoordinations EventCoordinator[]
  eventRegistrations EventRegistration[]

  @@map("users")
}

// School model - represents affiliated schools
model School {
  id          String   @id @default(cuid())
  name        String
  address     String?
  contactEmail String?
  contactPhone String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users         User[]
  volunteerLogs VolunteerLog[]

  @@map("schools")
}

// VolunteerLog model - represents volunteer hour submissions
model VolunteerLog {
  id                  String        @id @default(cuid())
  hours               Float
  description         String
  date                DateTime
  status              String        @default("pending") // pending, approved, rejected
  claimType           String        @default("volunteer") // event, donation, volunteer, other
  donationItems       Float?        // For donation claims
  proofFileName       String?
  proofFilePath       String?
  coordinatorComment  String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  reviewedAt          DateTime?
  
  // Foreign keys
  userId      String
  schoolId    String
  eventId     String?
  reviewedBy  String?

  // Relations
  user    User   @relation(fields: [userId], references: [id])
  school  School @relation(fields: [schoolId], references: [id])
  event   Event? @relation(fields: [eventId], references: [id])
  reviewer User? @relation("LogReviewer", fields: [reviewedBy], references: [id])

  @@map("volunteer_logs")
}

// Badge model - represents gamification badges
model Badge {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String
  iconUrl       String?
  requiredHours Float
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  userBadges UserBadge[]

  @@map("badges")
}

// UserBadge model - represents user badge achievements
model UserBadge {
  id        String   @id @default(cuid())
  earnedAt  DateTime @default(now())
  createdAt DateTime @default(now())

  // Foreign keys
  userId  String
  badgeId String

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  badge Badge @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
  @@map("user_badges")
}

// Event model - represents volunteer events
model Event {
  id              String   @id @default(cuid())
  title           String
  description     String
  date            DateTime
  time            String?
  location        String?
  duration        Float?   // Hours awarded for the event
  maxVolunteers   Int
  coordinatorId   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  coordinator         User                  @relation("EventCreator", fields: [coordinatorId], references: [id])
  eventCoordinators   EventCoordinator[]    // Student coordinators assigned to event
  eventRegistrations  EventRegistration[]   // Students registered for event
  volunteerLogs       VolunteerLog[]        // Claims submitted for this event

  @@map("events")
}

// EventCoordinator junction table - links student coordinators to events
model EventCoordinator {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_coordinators")
}

// EventRegistration junction table - links students to events they've registered for
model EventRegistration {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_registrations")
}

// Note: SQLite doesn't support enums, so we use string literals
// UserRole: "STUDENT" | "COORDINATOR" | "STUDENT_COORDINATOR" | "ADMIN"
// LogStatus: "pending" | "approved" | "rejected"
// ClaimType: "event" | "donation" | "volunteer" | "other"
